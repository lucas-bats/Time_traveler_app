'use server';
/**
 * @fileOverview Defines an AI agent that allows users to chat with historical figures.
 * It uses Genkit to create a flow that takes a user message and the name of a historical figure,
 * and returns a response in the style of that figure.
 *
 * @exports chatWithHistoricalFigure - The main server action that executes the chat flow.
 * @exports ChatWithHistoricalFigureInput - The Zod schema type for the chat input.
 * @exports ChatWithHistoricalFigureOutput - The Zod schema type for the chat output.
 */
import {ai} from '@/ai/genkit';
import {z} from 'genkit';

/**
 * Zod schema for the input of the historical figure chat flow.
 * This ensures that the input data has the correct shape and types.
 */
const ChatWithHistoricalFigureInputSchema = z.object({
  historicalFigure: z.string().describe('The name of the historical figure to chat with.'),
  userMessage: z.string().describe('The message from the user to the historical figure.'),
  language: z.string().describe('The language for the historical figure to respond in (e.g., "en", "pt").'),
});
export type ChatWithHistoricalFigureInput = z.infer<typeof ChatWithHistoricalFigureInputSchema>;

/**
 * Zod schema for the output of the historical figure chat flow.
 */
const ChatWithHistoricalFigureOutputSchema = z.object({
  response: z.string().describe('The response from the historical figure.'),
});
export type ChatWithHistoricalFigureOutput = z.infer<typeof ChatWithHistoricalFigureOutputSchema>;

/**
 * A server action that serves as a wrapper for the chatWithHistoricalFigureFlow.
 * Client-side components call this function to interact with the AI.
 * @param input The input data, containing the figure, message, and language.
 * @returns The response generated by the AI flow.
 */
export async function chatWithHistoricalFigure(
  input: ChatWithHistoricalFigureInput
): Promise<ChatWithHistoricalFigureOutput> {
  return chatWithHistoricalFigureFlow(input);
}

/**
 * The Genkit prompt that instructs the AI on how to respond.
 * It uses Handlebars syntax ({{...}}) to insert the input data.
 */
const prompt = ai.definePrompt({
  name: 'chatWithHistoricalFigurePrompt',
  input: {schema: ChatWithHistoricalFigureInputSchema},
  output: {schema: ChatWithHistoricalFigureOutputSchema},
  prompt: `You are {{historicalFigure}}, a historical figure. Respond to the following message as if you were them, using their personality, vocabulary, and historical context.

Respond in the following language: {{language}}.

Message: {{{userMessage}}}`,
});

/**
 * The main Genkit flow for chatting with a historical figure.
 * A flow orchestrates one or more steps, like calling a prompt or a tool.
 */
const chatWithHistoricalFigureFlow = ai.defineFlow(
  {
    name: 'chatWithHistoricalFigureFlow',
    inputSchema: ChatWithHistoricalFigureInputSchema,
    outputSchema: ChatWithHistoricalFigureOutputSchema,
  },
  async input => {
    // Implements retry logic for robustness.
    let attempts = 0;
    const maxAttempts = 3;

    while (attempts < maxAttempts) {
      attempts++;
      // Call the prompt defined above with the flow's input.
      const { output } = await prompt(input);

      // If the prompt returns a valid response, return the output.
      if (output?.response) {
        return output;
      }
    }

    // If the maximum number of attempts is reached without success, throw an error.
    throw new Error('The AI was unable to generate a response. Please try rephrasing your question.');
  }
);
