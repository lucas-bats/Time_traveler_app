'use server';
/**
 * @fileOverview This file defines an AI agent that allows users
 * to chat with a historical event, receiving responses from the perspective
 * of its key participants.
 *
 * Exported Functions:
 * - chatWithEvent: The main function that executes the flow.
 * - ChatWithEventInput: The input type for the function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Defines the input schema for the event chat flow using Zod.
const ChatWithEventInputSchema = z.object({
  eventName: z.string().describe('The name of the historical event.'),
  eventContext: z.string().describe('A brief context of the historical event.'),
  participants: z.array(z.string()).describe('A list of names of the key participants in the event.'),
  userMessage: z.string().describe('The message from the user to the event.'),
  language: z.string().describe('The language for the event to respond in (e.g., "en", "pt").'),
});
// Exports the TypeScript type inferred from the Zod schema.
export type ChatWithEventInput = z.infer<typeof ChatWithEventInputSchema>;

/**
 * An asynchronous exported function that serves as a wrapper for the chatWithEventFlow.
 * Client-side components will call this Server Action to interact with the AI.
 * @param input The input data for the event chat.
 * @returns The response generated by the AI flow.
 */
export async function chatWithEvent(
  input: ChatWithEventInput
): Promise<ReadableStream<Uint8Array>> {
  return chatWithEventFlow(input);
}

// Defines the AI prompt for the event chat.
const prompt = ai.definePrompt({
  name: 'chatWithEventPrompt',
  input: {schema: ChatWithEventInputSchema},
  // The prompt template instructing the AI on how to respond.
  // It uses Handlebars syntax to insert dynamic data like the event name and participants.
  prompt: `You are the representation of the historical event: {{eventName}}.
Your personality is that of a "spirit of history," narrating and summarizing the event from a neutral, omniscient perspective.

Your task is to respond to the user's message by orchestrating a dialogue or a "round table" discussion between the key participants.
Bring in the perspectives of the characters involved, explaining the historical context and how each participant would likely react or think.
If asked about consequences, explain the subsequent impacts.

Your response must be in the style of a summarized dialogue, highlighting the different viewpoints.

Event Context: {{eventContext}}
Key Participants: {{#each participants}}- {{this}}
{{/each}}
User Message: {{{userMessage}}}

Respond in the following language: {{language}}.`,
});

// Defines the main AI flow for chatting with an event.
const chatWithEventFlow = ai.defineFlow(
  {
    name: 'chatWithEventFlow',
    inputSchema: ChatWithEventInputSchema,
    outputSchema: z.string(),
    stream: true,
  },
  // The implementation function of the flow.
  async input => {
    // Calls the prompt with the provided input.
    const {stream} = await prompt(input);
    return stream.pipeThrough(new TextEncoder());
  }
);
